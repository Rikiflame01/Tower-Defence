#pragma kernel CSMain

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> initialPositions;
StructuredBuffer<float> maxHeights;

float time;
float swayAmplitude = 0.1;
float swayFrequency = 1.0;
float swayHeightPercentage = 0.5;
float blendZoneHeight = 0.1;

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float3 originalPosition = initialPositions[id.x];
    float maxHeight = maxHeights[id.x / 256];

    float swayThreshold = maxHeight * swayHeightPercentage;
    float blendStart = swayThreshold - (maxHeight * blendZoneHeight);

    float uniformSway = sin(time * swayFrequency) * swayAmplitude;

    if (originalPosition.y > swayThreshold)
    {
        originalPosition.x += uniformSway;
    }
    else if (originalPosition.y > blendStart)
    {
        float blendFactor = (originalPosition.y - blendStart) / (swayThreshold - blendStart);
        originalPosition.x += uniformSway * blendFactor;
    }

    vertices[id.x] = originalPosition;
}
